{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","renderFile","fileObj","ExcelRenderer","err","resp","console","log","setState","dataLoaded","cols","rows","fileHandler","event","target","files","length","fileName","name","slice","lastIndexOf","uploadedFileName","isFormInvalid","openFileBrowser","fileInput","current","click","openNewPage","chosenItem","url","window","open","state","isOpen","bind","assertThisInitialized","toggle","React","createRef","react_default","a","createElement","Jumbotron","className","Button","onClick","Container","FormGroup","row","Label","for","xs","sm","lg","size","Col","InputGroup","InputGroupAddon","addonType","color","style","zIndex","type","hidden","onChange","ref","value","padding","Input","readOnly","invalid","FormFeedback","Fade","in","tag","fontStyle","Card","body","outline","build","data","columns","tableClassName","tableHeaderRowClass","Component","Boolean","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.e37563d2.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './App.css';\nimport {OutTable, ExcelRenderer} from 'react-excel-renderer';\nimport { Jumbotron, Col, Input, InputGroup, InputGroupAddon, FormGroup, Label, Button, Fade, FormFeedback, Container, Card } from 'reactstrap';\n\nclass App extends Component {\n  constructor(props){\n    super(props);\n    this.state={\n      isOpen: false,\n      dataLoaded: false,\n      isFormInvalid: false,\n      rows: null,\n      cols: null\n    }\n    this.fileHandler = this.fileHandler.bind(this);\n    this.toggle = this.toggle.bind(this);\n    this.openFileBrowser = this.openFileBrowser.bind(this);\n    this.renderFile = this.renderFile.bind(this);\n    this.openNewPage = this.openNewPage.bind(this);\n    this.fileInput = React.createRef();\n  }\n\n  renderFile = (fileObj) => {\n      //just pass the fileObj as parameter\n      ExcelRenderer(fileObj, (err, resp) => {\n        if(err){\n          console.log(err);            \n        }\n        else{\n          this.setState({\n            dataLoaded: true,\n            cols: resp.cols,\n            rows: resp.rows\n          });\n        }\n      }); \n  }\n\n  fileHandler = (event) => {    \n    if(event.target.files.length){\n      let fileObj = event.target.files[0];\n      let fileName = fileObj.name;\n\n      \n      //check for file extension and pass only if it is .xlsx and display error message otherwise\n      if(fileName.slice(fileName.lastIndexOf('.')+1) === \"xlsx\"){\n        this.setState({\n          uploadedFileName: fileName,\n          isFormInvalid: false\n        });\n        this.renderFile(fileObj)\n      }    \n      else{\n        this.setState({\n          isFormInvalid: true,\n          uploadedFileName: \"\"\n        })\n      }\n    }               \n  }\n\n  toggle() {\n    this.setState({\n      isOpen: !this.state.isOpen\n    });\n  }\n\n  openFileBrowser = () => {\n    this.fileInput.current.click();\n  }\n\n  openNewPage = (chosenItem) => {\n    const url = chosenItem === \"github\" ? \"https://github.com/ashishd751/react-excel-renderer\" : \"https://medium.com/@ashishd751/render-and-display-excel-sheets-on-webpage-using-react-js-af785a5db6a7\";\n    window.open(url, '_blank');\n  }\n\n  render() {\n    return (\n      <div>\n        <div>\n          <Jumbotron className=\"jumbotron-background\">          \n              <h1 className=\"display-3\">react-excel-renderer</h1>\n              <p className=\"lead\">Welcome to the demo of react-excel-renderer.</p>  \n              <Button className=\"primary jumbotron-button\" onClick={this.openNewPage.bind(this,\"github\")}>GitHub</Button>{' '}\n              <Button className=\"primary jumbotron-button\" onClick={this.openNewPage.bind(this,\"medium\")}>Medium</Button>                      \n              <hr className=\"my-2\" />\n              <p>Developed with <span className=\"fa fa-heart\"></span> by Ashish Deshpande</p>\n          </Jumbotron>\n        </div>\n        <Container>\n        <form>\n          <FormGroup row>\n            <Label for=\"exampleFile\" xs={6} sm={4} lg={2} size=\"lg\">Upload</Label>          \n            <Col xs={4} sm={8} lg={10}>                                                     \n              <InputGroup>\n                <InputGroupAddon addonType=\"prepend\">\n                  <Button color=\"info\" style={{color: \"white\", zIndex: 0}} onClick={this.openFileBrowser.bind(this)}><i className=\"cui-file\"></i> Browse&hellip;</Button>\n                  <input type=\"file\" hidden onChange={this.fileHandler.bind(this)} ref={this.fileInput} onClick={(event)=> { event.target.value = null }} style={{\"padding\":\"10px\"}} />                                \n                </InputGroupAddon>\n                <Input type=\"text\" className=\"form-control\" value={this.state.uploadedFileName} readOnly invalid={this.state.isFormInvalid} />                                              \n                <FormFeedback>    \n                  <Fade in={this.state.isFormInvalid} tag=\"h6\" style={{fontStyle: \"italic\"}}>\n                    Please select a .xlsx file only !\n                  </Fade>                                                                \n                </FormFeedback>\n              </InputGroup>     \n            </Col>                                                   \n          </FormGroup>   \n        </form>\n\n        {this.state.dataLoaded && \n        <div>\n          <Card body outline color=\"secondary\" className=\"restrict-card\">\n            \n              <OutTable data={this.state.rows} columns={this.state.cols} tableClassName=\"ExcelTable2007\" tableHeaderRowClass=\"heading\" />\n            \n          </Card>  \n        </div>}\n        </Container>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport 'font-awesome/css/font-awesome.min.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}